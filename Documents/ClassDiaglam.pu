@startuml MedalPusher

namespace Case{
    class PusherMover
}

namespace Item{
    interface IFieldItem
    class FieldItem
    interface IFieldItemEvent
    class FieldItemEvent
    IFieldItem <|.. FieldItem
    IFieldItemEvent <|.. FieldItemEvent
    FieldItem *- IFieldItemEvent


    interface IReadOnlyMedal{
        +Value { get; } : int
        +ValueType { get; } : MedalValue
    }
    interface IMedal
    class Medal
    IReadOnlyMedal <|-- IMedal
    IMedal <|.. Medal

    interface IFieldObject
    IFieldObject <|-- IMedal
    IFieldObject <|-- IFieldItem

    namespace Pool{
        interface IReadOnlyPoolObject{
            +IsUsed {get;} : bool
            +UsedChanged<<event>> : bool
        }
        interface IReturnOnlyPoolObject{
            +ReturnToPool() : void
        }
        interface IPoolObject{
            +Takeout() : void
        }
        abstract PoolObject
        
        IReadOnlyPoolObject <|-- IReturnOnlyPoolObject
        IReturnOnlyPoolObject <|-- IPoolObject
        IReturnOnlyPoolObject <|-- Item.IMedal
        IPoolObject <|.. PoolObject
        PoolObject <|-- Item.Medal
        IReadOnlyPoolObject <|-- Item.IReadOnlyMedal
        

        interface IMedalPool{
            +IMedal PickUp()
        }
        interface IObservableMedalPoolInfo
        class MedalPool

        IMedalPool <|.. MedalPool
        IObservableMedalPoolInfo <|.. MedalPool

        MedalPool --> Item.Medal
    }
    
    namespace Checker{
        interface IObservableItemChecker<TItem>{
            +IObservable<TItem>
        }

        interface IObservableMedalChecker{
            +IObservable<IMedal>
        }
        class MedalChecker
        IObservableItemChecker <|-- IObservableMedalChecker
        IObservableMedalChecker <|.. MedalChecker

        interface IObservableFieldItemChecker{
            +IObservable<IFieldItem>
        }
        class FieldItemChecker
        IObservableItemChecker <|-- IObservableFieldItemChecker
        IObservableFieldItemChecker <|.. FieldItemChecker

        MedalCheckerIndicator --> IObservableMedalChecker

    }
    
    namespace Payout{
        interface IMedalPayoutOperation
        interface IObservableMedalPayoutStock
        class MedalPayouterStorage
        MedalPayouterStorage ..|> IMedalPayoutOperation
        IObservableMedalPayoutStock <|.. MedalPayouterStorage
        IMedalPayouter ---* MedalPayouterStorage

        interface IMedalPayouter
        abstract MedalPayouter
        class NormalMedalPayouter
        class DeployMedalPayouter
        IMedalPayouter <|.. MedalPayouter
        MedalPayouter <|-- NormalMedalPayouter
        MedalPayouter <|-- DeployMedalPayouter
        MedalPayouter --> Item.Pool.IMedalPool


        interface IObservableFieldItemPayouter{
        }
        interface IFieldItemPayoutOperator{
            +void Payout(IFieldItem)
        }
        class FieldItemPayouter
        FieldItemPayouter ..|> IFieldItemPayoutOperator
        IObservableFieldItemPayouter <|.. FieldItemPayouter

        class PayoutMedalView<<View>>
        class PayoutFieldItemView<<View>>
        PayoutMedalView --> IObservableMedalPayoutStock : 払い出しメダル数を監視
        PayoutFieldItemView --> IObservableFieldItemPayouter : 払出し待機アイテムを監視



        class PayoutInstaller<<Installer>>
    }

    'ゲーム開始時のメダル充填
    Item.Payout.IMedalPayoutOperation <-- MedalFieldAutoFiller
    
    namespace Inventory{
        interface IObservableMedalInventory{
            +IObservable<int> MedalInventoryCount
        }
        class MedalInventory{
            -ReactiveProperty<int> m_medalCount
        }
        IObservableMedalInventory <|.. MedalInventory

        interface IObservableFieldItemInventory{
            +IObservable<IReadOnlyList<IFieldItem>> 
        }
        class FieldItemInventory{
            -ReactiveCollection<IFieldItem> m_items
        }
        IObservableFieldItemInventory <|.. FieldItemInventory

        MedalInventory --(( IObservableMedalChecker
        FieldItemInventory --(( IObservableFieldItemChecker
        Input.IGameCommandProvider <--- MedalInventory : 入力を監視

        class FieldItemApplyer
        Item.Payout.IMedalPayoutOperation <--- FieldItemApplyer : メダル払い出しを要求

        class MedalInventoryView<<View>>
        MedalInventoryView --> IObservableMedalInventory
        class FieldItemInventoryView<<View>>
        FieldItemInventoryView --> IObservableFieldItemInventory

        FieldItemApplyer --> IObservableFieldItemInventory
        MedalInventory --> Item.Payout.IMedalPayoutOperation : メダル払い出しを要求

        class InventoryInstaller<<Installer>>
    }


}

namespace Input #DDDDDD{
    enum GameCommand
    interface IGameCommandProvider{
        +IObservable<GameCommand> InputedCommand { get; }
    }
    class UserInputProvider
    class Input<<static>>
    UserInputProvider --> Input

    interface IKeyConfig
    abstract KeyConfig
    class DefaultKeyConfig

    IKeyConfig <|.. KeyConfig
    KeyConfig <|-- DefaultKeyConfig
    GameCommand <- KeyConfig

    class KeyConfigSelector
    KeyConfigSelector --> IKeyConfig
    UserInputProvider -> KeyConfigSelector
    IGameCommandProvider <|.. UserInputProvider
    
}


namespace Slot #DDDDDD {
    namespace Stock{
        interface IReadOnlyObservableStockCount{
            +Stock { get; } : IReadOnlyReactiveProperty<int>
        }
        interface IStockAdder
        interface IStockCounter
        class StockCounter
        IReadOnlyObservableStockCount <|.. StockCounter
        IStockAdder <. StockCounter
        StockCounter ..|> IStockCounter

    }

    class SlotStarter
    Slot.Stock.IStockCounter <-- SlotStarter
    SlotStarter *--  ISlotScenarioDeterminer

    interface ISlotScenarioDeterminer{
        +DetermineRole() : IObservable<Unit>
    }
    class SlotScenarioDeterminer
    ISlotScenarioDeterminer <|.. SlotScenarioDeterminer
    SlotScenarioDeterminer *-- ISlotProductionDeterminer
    interface ISlotResultSubmitter
    ISlotResultSubmitter <|.. SlotScenarioDeterminer

    interface ISlotProductionDeterminer{
        +DetermineProduction(RoleSet) : IObservable<Unit>
    }
    class SlotProductionDeterminer
    ISlotProductionDeterminer <|.. SlotProductionDeterminer
    SlotProductionDeterminer *-- ISlotDriver
    Slot.Stock.IReadOnlyObservableStockCount <-- SlotProductionDeterminer

    interface ISlotDriver{
        +ControlBy(Production) : IObservable<Unit>
    }
    interface IReadOnlyObservableSlotProdctionStatus
    class SlotDriver
    ISlotDriver <|.. SlotDriver
    IReadOnlyObservableSlotProdctionStatus <|. SlotDriver

    namespace Core{
        class ReelSequenceProvider
        interface IReelSequenceProvider
        IReelSequenceProvider <|.. ReelSequenceProvider
        Slot.SlotDriver "1"*--"3" IReelSequenceProvider

        class RoleTweenProvider
        ReelSequenceProvider "1"*--"*" RoleTweenProvider
        RoleTweenProvider *-- IRoleOperation

        interface IReachAntagonistSequenceProvider
        class ReachAntagonistSequenceProvider
        IReachAntagonistSequenceProvider <|.. ReachAntagonistSequenceProvider

        ReelSequenceProvider +- IReachAntagonistSequenceProvider

        interface IRoleOperation{
            +transform { get; } : Transform
            +Value { get; } : RoleValue
        }
        class Role
        IRoleOperation <|.. Role
    }

    namespace Production{
        namespace Light{
            class SlotLightController
            SlotLightController --> Slot.IReadOnlyObservableSlotProdctionStatus

            class SlotLightColorChanger
            class SlotLightIntensityChanger
            class SlotLightLookAtChanger

            SlotLightColorChanger <-- SlotLightController
            SlotLightIntensityChanger <-- SlotLightController
            SlotLightLookAtChanger <-- SlotLightController
        }
    }
}

namespace SlotInterface{

    class StockCounterView<<View>>
    StockCounterView --> Slot.Stock.IReadOnlyObservableStockCount

    class SlotResultToPrizeConverter
    Slot.ISlotResultSubmitter <-- SlotResultToPrizeConverter
    IMedalPayoutOperation ))-- SlotResultToPrizeConverter

    class SlotStockSensor
    Slot.Stock.IStockAdder <-- SlotStockSensor
    SlotStockSensor ---(( IObservableMedalChecker
}
' namespace PayoutPinball{
'     interface IPinballPocket
'     class PinballPocket
'     IPinballPocket <|.. PinballPocket

'     interface IPinballEvent
'     class PinballEvent
'     IPinballEvent <|.. PinballEvent

'     PinballPocket *- IPinballEvent
'     PinballPocket --(( IObservableMedalChecker
' }



' namespace Lottery{
'     interface IObservableLotteryRotater{
'         +IObservable<float> ObservableRotate { get; }
'     }
'     class LotteryBowlRotater
'     IObservableLotteryRotater <|.. LotteryBowlRotater

'     class LotteryPrizeInfo{
'         IFieldObject Prize { get; }
'     }
'     interface ILotteryPocketPositionOperation
'     class LotteryPocket
'     LotteryPocket ..|> ILotteryPocketPositionOperation

'     class LotteryPocketPositionOperator
'     LotteryPocketPositionOperator --> IObservableLotteryRotater 
'     ILotteryPocketPositionOperation "*" --o "1" LotteryPocketPositionOperator

'     class LotteryPrize3DView
'     LotteryPrize3DView -* LotteryPocket

'     interface ILotteryPrizeInsertionSlot
'     class LotteryPrizeCollector
'     LotteryPrizeCollector ..|> ILotteryPrizeInsertionSlot

'     ILotteryPrizeInsertionSlot <-- LotteryPocket
'     LotteryPocket *- LotteryPrizeInfo

'     Item.Payout.IFieldItemPayoutOperator <-- LotteryPrizeCollector
'     Item.Payout.IMedalPayoutOperation <-- LotteryPrizeCollector

'     interface IBallBornOperator{
'         +Born() : void
'     }
'     class BallBorner
'     IBallBornOperator <|.. BallBorner


'     class LotteryStockCollector
'     IObservableMedalChecker ))-- LotteryStockCollector
'     LotteryStockCollector --> IBallBornOperator

'     class LotteryInstaller<<Installer>>{}
' }

namespace Debug{
    class MedalPoolDebug

    Item.Pool.IObservableMedalPoolInfo <-- MedalPoolDebug
}

class SceneInstaller<<Installer>>

@enduml